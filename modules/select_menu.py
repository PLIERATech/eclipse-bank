from nextcord.ui import View, Select
import nextcord as nxc
from const import *
from .log_functions import *
from .embeds import *
from .verify import *
from card_gen import *
import asyncio

class CardSelectView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @nxc.ui.select(
        custom_id="card_transaction",
        placeholder="–î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ–π",
        options=[
            nxc.SelectOption(label="–ë–∞–ª–∞–Ω—Å", value="sm_checkBalance"),
            nxc.SelectOption(label="–ü–µ—Ä–µ–≤–æ–¥", value="sm_transfer"),
            # nxc.SelectOption(label="–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç", value="sm_invoice"),
        ],
    )

    async def card_transaction_callback(self, select: Select, inter: nxc.Interaction):
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Interaction
        user = inter.user
        message = inter.message  # –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É
        channel = inter.channel  # –ö–∞–Ω–∞–ª, –≥–¥–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        action_sm = {
            "sm_checkBalance": sm_check_balance,
            "sm_transfer": sm_transfer,
            # "sm_invoice": sm_invoice,
        }

        handler = action_sm.get(select.values[0], sm_unknown)
        await handler(inter, user, message, channel)

        await inter.message.edit(view=CardSelectView())  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä


    @nxc.ui.select(
        custom_id="card_settings",
        placeholder="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        options=[
            nxc.SelectOption(label="–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", value="sm_changeName"),
            nxc.SelectOption(label="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value="sm_addUser"),
            nxc.SelectOption(label="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value="sm_delUser"),
            nxc.SelectOption(label="–ü–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É", value="sm_transferOwner"),
        ],
    )
    async def card_settings_callback(self, select: Select, inter: nxc.Interaction):
        user = inter.user  # –ö—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
        message = inter.message  # –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É
        channel = inter.channel  # –ö–∞–Ω–∞–ª, –≥–¥–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ


        action_sm = {
            "sm_changeName": sm_change_name,
            "sm_addUser": sm_add_user,
            "sm_delUser": sm_del_user,
            "sm_transferOwner": sm_transfer_owner,
        }

        handler = action_sm.get(select.values[0], sm_unknown)
        await handler(inter, user, message, channel)

        await inter.message.edit(view=CardSelectView())  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä




#- =================================================================================================================================
#-                                                                                                                                  
#-                                                     –î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ–π                                                            
#-                                                                                                                                  
#- =================================================================================================================================

#@ ---------------------------------------------------------------------------------------------------------------------------------
#@                                                      –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å                                                            
#@ ---------------------------------------------------------------------------------------------------------------------------------

async def sm_check_balance(inter, user, message, channel):
    await inter.response.defer(ephemeral=True)
    response_card = supabase.rpc("find_balance", {"msg_id": message.id}).execute()

    if response_card.data:
        balance = response_card.data[0]['balance']
        type = response_card.data[0]['type']
        number = response_card.data[0]['number']
        full_number = f"{suffixes.get(type, type)}{number}"

        await inter.send(f"–ù–∞ –∫–∞—Ä—Ç–µ {full_number} —Ö—Ä–∞–Ω–∏—Ç—Å—è {balance} –∞–ª–º.", ephemeral=True)
    else:
        await inter.send(f"–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", ephemeral=True)



#@ ---------------------------------------------------------------------------------------------------------------------------------
#@                                                      –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤                                                             
#@ ---------------------------------------------------------------------------------------------------------------------------------

async def sm_transfer(inter, user, message, channel):
    """–í—ã–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""

    class TransferModal(nxc.ui.Modal):
        def __init__(self):
            super().__init__(title="–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")

            self.card_number = nxc.ui.TextInput(label="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä...", required=True, min_length=5, max_length=5)
            self.add_item(self.card_number)

            self.amount = nxc.ui.TextInput(label="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É...", required=True)
            self.add_item(self.amount)

            self.comment = nxc.ui.TextInput(label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", placeholder="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ...", required=False, style=nxc.TextInputStyle.paragraph, max_length=100 )
            self.add_item(self.comment)



        async def callback(self, inter: nxc.Interaction):
            await inter.response.defer(ephemeral=True)
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã"""
            receiver_card = self.card_number.value.strip()
            amount_text = self.amount.value

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Ü–∏—Ñ—Ä–∞–º–∏
            if not await verify_card_int(inter, receiver_card):
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            if not await verify_an_integer(inter, amount_text):
                return
            amount = int(amount_text)
            

            receiver_data = supabase.table("cards").select("type, balance, members, clients(channels)").eq("number", receiver_card).execute()

            # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if not receiver_data.data:
                await inter.send("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ **–Ω–µ –Ω–∞–π–¥–µ–Ω–∞**!", ephemeral=True)
                return

            receiver_type = receiver_data.data[0]["type"]
            receiver_balance = receiver_data.data[0]["balance"]
            receiver_members = receiver_data.data[0]["members"]
            receiver_client_data = receiver_data.data[0].get("clients")
            receiver_owner_transaction_channel_id = list(map(int, receiver_client_data["channels"].strip("[]").split(",")))[0]
            receiver_full_number = f"{suffixes.get(receiver_type, receiver_type)}{receiver_card}"

            if not isinstance(receiver_members, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å (jsonb)
                receiver_members = {}

            # üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ message.id

            sender_data = supabase.rpc("find_card_in_message", {"msg_id": message.id}).execute()
            sender_type = sender_data.data[0]["type"]
            sender_card = sender_data.data[0]["number"]
            sender_balance = sender_data.data[0]["balance"]
            sender_members = sender_data.data[0]["members"]
            sender_owner_transaction_channel_id = sender_data.data[0]["owner_transactions"]
            sender_full_number = f"{suffixes.get(sender_type, sender_type)}{sender_card}"

            if not isinstance(sender_members, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å (jsonb)
                sender_members = {}

            # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥
            if sender_balance < amount:
                await inter.sende("‚ùå –û—à–∏–±–∫–∞: **–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤**!", ephemeral=True)
                return

            await inter.send(
                f"‚úÖ **–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!**\nüí≥ –û—Ç–∫—É–¥–∞ `{sender_full_number}`\nüì§ –ö–æ–º—É `{receiver_full_number}`\nüí∞ –°—É–º–º–∞ `{amount} –∞–ª–º.`\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{self.comment.value or '‚Äî'}`",
                ephemeral=True
            )

            # üîπ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            supabase.table("cards").update({"balance": sender_balance - amount}).eq("number", sender_card).execute()
            supabase.table("cards").update({"balance": receiver_balance + amount}).eq("number", receiver_card).execute()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            sender_message_text = f"**–ü–µ—Ä–µ–≤–æ–¥**\nüí≥ –û—Ç–∫—É–¥–∞ `{sender_full_number}`\nüì§ –ö–æ–º—É `{receiver_full_number}`\nüí∞ –°—É–º–º–∞ `{amount} –∞–ª–º.`\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{self.comment.value or '‚Äî'}`"
            receimer_message_text = f"**–ü–æ—Å—Ç—É–ø–∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞**\nüí≥ –û—Ç `{sender_full_number}`\nüì§ –ö—É–¥–∞ `{receiver_full_number}`\nüí∞ –°—É–º–º–∞ `{amount} –∞–ª–º.`\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{self.comment.value or '‚Äî'}`"
            sender_owner_transaction_channel = inter.client.get_channel(sender_owner_transaction_channel_id)
            receiver_owner_transaction_channel = inter.client.get_channel(receiver_owner_transaction_channel_id)
            await sender_owner_transaction_channel.send(sender_message_text)
            await receiver_owner_transaction_channel.send(receimer_message_text)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id, data in sender_members.items():
                channel_id_transactions_sender = data.get("id_transactions_channel")
                channel_transactions_sender = inter.client.get_channel(channel_id_transactions_sender)
                await channel_transactions_sender.send(sender_message_text)

            for user_id, data in receiver_members.items():
                channel_id_transactions_receiver = data.get("id_transactions_channel")
                channel_transactions_receiver = inter.client.get_channel(channel_id_transactions_receiver)
                await channel_transactions_receiver.send(receimer_message_text)

    # üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    model = TransferModal()
    await inter.response.send_modal(model)



#@ ---------------------------------------------------------------------------------------------------------------------------------
#@                                                       –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç                                                             
#@ ---------------------------------------------------------------------------------------------------------------------------------

async def sm_invoice(inter, user, message, channel):
    """–í—ã–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞"""

    class InvoiceModal(nxc.ui.Modal):
        def __init__(self):
            super().__init__(title="–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç")

            self.nickname_input = nxc.ui.TextInput(label="–ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º...", required=True, min_length=2, max_length=32)
            self.add_item(self.nickname_input)

            self.amount = nxc.ui.TextInput(label="–°—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É...", required=True)
            self.add_item(self.amount)

            self.comment = nxc.ui.TextInput(label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", placeholder="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ...", required=False, style=nxc.TextInputStyle.paragraph, max_length=100 )
            self.add_item(self.comment)


        async def callback(self, inter: nxc.Interaction):
            await inter.response.defer(ephemeral=True)
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã"""
            nickname = self.nickname_input.value.strip()
            amount_text = self.amount.value

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            if not await verify_an_integer(inter, amount_text):
                return
            amount = int(amount_text)
            

            receiver_data = supabase.table("clients").select("type, balance, members, clients(channels)").eq("number", receiver_card).execute()

            # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if not receiver_data.data:
                await inter.send("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ **–Ω–µ –Ω–∞–π–¥–µ–Ω–∞**!", ephemeral=True)
                return

            receiver_type = receiver_data.data[0]["type"]
            receiver_balance = receiver_data.data[0]["balance"]
            receiver_members = receiver_data.data[0]["members"]
            receiver_client_data = receiver_data.data[0].get("clients")
            receiver_owner_transaction_channel_id = list(map(int, receiver_client_data["channels"].strip("[]").split(",")))[0]
            receiver_full_number = f"{suffixes.get(receiver_type, receiver_type)}{receiver_card}"

            if not isinstance(receiver_members, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å (jsonb)
                receiver_members = {}

            # üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ message.id

            sender_data = supabase.rpc("find_card_in_message", {"msg_id": message.id}).execute()
            sender_type = sender_data.data[0]["type"]
            sender_card = sender_data.data[0]["number"]
            sender_balance = sender_data.data[0]["balance"]
            sender_members = sender_data.data[0]["members"]
            sender_owner_transaction_channel_id = sender_data.data[0]["owner_transactions"]
            sender_full_number = f"{suffixes.get(sender_type, sender_type)}{sender_card}"

            if not isinstance(sender_members, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å (jsonb)
                sender_members = {}

            # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥
            if sender_balance < amount:
                await inter.sende("‚ùå –û—à–∏–±–∫–∞: **–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤**!", ephemeral=True)
                return

            await inter.send(
                f"‚úÖ **–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!**\nüí≥ –û—Ç–∫—É–¥–∞ `{sender_full_number}`\nüì§ –ö–æ–º—É `{receiver_full_number}`\nüí∞ –°—É–º–º–∞ `{amount} –∞–ª–º.`\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{self.comment.value or '‚Äî'}`",
                ephemeral=True
            )

            # üîπ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            supabase.table("cards").update({"balance": sender_balance - amount}).eq("number", sender_card).execute()
            supabase.table("cards").update({"balance": receiver_balance + amount}).eq("number", receiver_card).execute()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            sender_message_text = f"**–ü–µ—Ä–µ–≤–æ–¥**\nüí≥ –û—Ç–∫—É–¥–∞ `{sender_full_number}`\nüì§ –ö–æ–º—É `{receiver_full_number}`\nüí∞ –°—É–º–º–∞ `{amount} –∞–ª–º.`\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{self.comment.value or '‚Äî'}`"
            receimer_message_text = f"**–ü–æ—Å—Ç—É–ø–∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞**\nüí≥ –û—Ç `{sender_full_number}`\nüì§ –ö—É–¥–∞ `{receiver_full_number}`\nüí∞ –°—É–º–º–∞ `{amount} –∞–ª–º.`\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{self.comment.value or '‚Äî'}`"
            sender_owner_transaction_channel = inter.client.get_channel(sender_owner_transaction_channel_id)
            receiver_owner_transaction_channel = inter.client.get_channel(receiver_owner_transaction_channel_id)
            await sender_owner_transaction_channel.send(sender_message_text)
            await receiver_owner_transaction_channel.send(receimer_message_text)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id, data in sender_members.items():
                channel_id_transactions_sender = data.get("id_transactions_channel")
                channel_transactions_sender = inter.client.get_channel(channel_id_transactions_sender)
                await channel_transactions_sender.send(sender_message_text)

            for user_id, data in receiver_members.items():
                channel_id_transactions_receiver = data.get("id_transactions_channel")
                channel_transactions_receiver = inter.client.get_channel(channel_id_transactions_receiver)
                await channel_transactions_receiver.send(receimer_message_text)

    # üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    model = InvoiceModal()
    await inter.response.send_modal(model)



















#     await inter.response.send_message(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}, –ö–∞–Ω–∞–ª: {channel.mention}", ephemeral=True)
#     return 






#- =================================================================================================================================
#-                                                                                                                                  
#-                                                      –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã                                                             
#-                                                                                                                                  
#- =================================================================================================================================

#@ ---------------------------------------------------------------------------------------------------------------------------------
#@                                                     –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ                                                            
#@ ---------------------------------------------------------------------------------------------------------------------------------

async def sm_change_name(inter, user, message, channel):
    cards_table = supabase.table("cards").select("type, name, number, members").eq("select_menu_id", message.id).execute()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã (–ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if not cards_table.data:
        await inter.response.send_message("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.", ephemeral=True)
        return

    type = cards_table.data[0]['type']
    number = cards_table.data[0]['number']
    bdcardname = cards_table.data[0]['name']
    members = cards_table.data[0]['members']
    full_number = f"{suffixes.get(type, type)}{number}"
    card_type_rus = type_translate.get(type, type)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π (–Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ)
    if type == admCardTypes[2]:
        await inter.response.send_message("–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã", ephemeral=True)
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å
    if not isinstance(members, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å (jsonb)
        members = {}

    class ChangeNameCardModal(nxc.ui.Modal):
        def __init__(self):
            super().__init__(title="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–∞—Ä—Ç–µ")

            self.cardname_input = nxc.ui.TextInput(label="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ...", required=True, min_length=1, max_length=20)
            self.add_item(self.cardname_input)


        async def callback(self, inter: nxc.Interaction):
            await inter.response.defer(ephemeral=True)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–∑ –ø–æ–ª—è
            cardname = self.cardname_input.value.strip()

            if cardname == bdcardname:
                await inter.send(f"–û—à–∏–±–∫–∞: –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫–æ–µ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", ephemeral=True)
                return

            await inter.send(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã {full_number} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ –Ω–∞ '{cardname}'!", ephemeral=True)

            supabase.table("cards").update({"name": cardname}).eq("select_menu_id", message.id).execute()

            existing_embeds = message.embeds
            color = existing_embeds[1].color
            new_card_embed = e_cards(color, full_number, card_type_rus, cardname) 
            await message.edit(embeds=[new_card_embed, existing_embeds[1], existing_embeds[2]], attachments=[])

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if members:
                for user_id, data in members.items():
                    msg_id = data.get("id_message")
                    channel_id = data.get("id_channel")
                    channel = inter.client.get_channel(channel_id) 
                    message_users = await channel.fetch_message(msg_id)
                    await message_users.edit(embeds=[new_card_embed, existing_embeds[1], existing_embeds[2]], attachments=[])

    modal = ChangeNameCardModal()
    await inter.response.send_modal(modal)



#@ ---------------------------------------------------------------------------------------------------------------------------------
#@                                                   –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è                                                          
#@ ---------------------------------------------------------------------------------------------------------------------------------

async def sm_add_user(inter, user, message, channel):
    cards_table = supabase.table("cards").select("type, number, members, owner, clients(nickname)").eq("select_menu_id", message.id).execute()

    if not cards_table.data:
        await inter.response.send_message("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.", ephemeral=True)
        return

    type = cards_table.data[0]['type']
    number = cards_table.data[0]['number']
    members = cards_table.data[0]['members']
    full_number = f"{suffixes.get(type, type)}{number}"
    client_data = cards_table.data[0].get("clients")
    owner_name = client_data["nickname"]
    owner_id = cards_table.data[0]['owner'] 

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π (–Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ)
    if type == admCardTypes[2]:
        await inter.response.send_message("–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã", ephemeral=True)
        return

    if not isinstance(members, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å (jsonb)
        members = {}

    class AddUserModal(nxc.ui.Modal):
        def __init__(self):
            super().__init__(title="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–∞—Ä—Ç–µ")
            self.nickname_input = nxc.ui.TextInput(label="–ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º...", required=True, min_length=2, max_length=32)
            self.add_item(self.nickname_input)


        async def callback(self, inter: nxc.Interaction):
            await inter.response.defer(ephemeral=True)
            nickname = self.nickname_input.value.strip()
            
            nick_table = supabase.table("clients").select("dsc_id, channels").eq("nickname", nickname).execute()
            if not nick_table.data:
                await inter.send(f"–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º.", ephemeral=True)
                return

            member_id = nick_table.data[0]['dsc_id']
            if not any(role.id in (staff_role) for role in user.roles):
                if member_id == owner_id:
                    await inter.send(f"–û—à–∏–±–∫–∞: –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Å–∞–º–æ–º—É —Å–µ–±–µ.", ephemeral=True)
                    return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
            if str(member_id) in members:
                await inter.send(f"–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç {nickname} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞—Ä—Ç–µ.", ephemeral=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ ID
            member_table = supabase.table("clients").select("channels").eq("dsc_id", member_id).execute()
            member_channel_id = list(map(int, member_table.data[0]["channels"].strip("[]").split(",")))[1]
            member_transactions_channel_id = list(map(int, member_table.data[0]["channels"].strip("[]").split(",")))[0]
            member_channel = inter.guild.get_channel(member_channel_id)

            existing_embeds = message.embeds
            color = existing_embeds[1].color
            card_embed_user = e_cards_users(inter.guild, color, owner_name, {})

            view = CardSelectView()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–π View
            message_member_card = await member_channel.send(content=f"<@{member_id}>", embeds=[existing_embeds[0], existing_embeds[1], card_embed_user], view=view)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
            members[str(member_id)] = {"id_transactions_channel": member_transactions_channel_id, "id_channel": member_channel_id, "id_message": message_member_card.id}

            card_embed_user = e_cards_users(inter.guild, color, owner_name, members)

            await inter.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞—Ä—Ç–µ {full_number}!", ephemeral=True)

            await message.edit(embeds=[existing_embeds[0], existing_embeds[1], card_embed_user], attachments=[])

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 
            for user_id, data in members.items():
                msg_id = data.get("id_message")
                channel_id = data.get("id_channel")
                channel = inter.client.get_channel(channel_id) 
                message_users = await channel.fetch_message(msg_id)
                await message_users.edit(embeds=[existing_embeds[0], existing_embeds[1], card_embed_user], attachments=[])

            supabase.table("cards").update({"members": members}).eq("select_menu_id", message.id).execute()

    modal = AddUserModal()
    await inter.response.send_modal(modal)



#@ ---------------------------------------------------------------------------------------------------------------------------------
#@                                                    –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è                                                          
#@ ---------------------------------------------------------------------------------------------------------------------------------

async def sm_del_user(inter, user, message, channel):
    cards_table = supabase.table("cards").select("type, number, members, owner, clients(nickname)").eq("select_menu_id", message.id).execute()

    if not cards_table.data:
        await inter.response.send_message("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.", ephemeral=True)
        return

    type = cards_table.data[0]['type']
    number = cards_table.data[0]['number']
    members = cards_table.data[0]['members']  # –≠—Ç–æ —É–∂–µ jsonb
    full_number = f"{suffixes.get(type, type)}{number}"
    client_data = cards_table.data[0].get("clients")
    owner_name = client_data["nickname"]
    owner_id = cards_table.data[0]['owner'] 

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π (–Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ)
    if type == admCardTypes[2]:
        await inter.response.send_message("–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã", ephemeral=True)
        return

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ json
    if not isinstance(members, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å (jsonb)
        members = {}

    class RemoveUserModal(nxc.ui.Modal):
        def __init__(self):
            super().__init__(title="–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞—Ä—Ç—ã")
            self.nickname_input = nxc.ui.TextInput(label="–ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º...", required=True, min_length=2, max_length=32)
            self.add_item(self.nickname_input)


        async def callback(self, inter: nxc.Interaction):
            await inter.response.defer(ephemeral=True)
            nickname = self.nickname_input.value.strip()
        
            nick_table = supabase.table("clients").select("dsc_id, channels").eq("nickname", nickname).execute()
            if not nick_table.data:
                await inter.send(f"–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º.", ephemeral=True)
                return

            member_id = nick_table.data[0]['dsc_id']
            if not any(role.id in (staff_role) for role in user.roles):
                if member_id == owner_id:
                    await inter.send(f"–û—à–∏–±–∫–∞: –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Å–∞–º–æ–º—É —Å–µ–±–µ.", ephemeral=True)
                    return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ
            if str(member_id) not in members:
                await inter.send(f"–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç —Å ID {member_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞—Ä—Ç–µ.", ephemeral=True)
                return

            channel_member_id = members.get(str(member_id)).get("id_channel")
            message_member_id = members.get(str(member_id)).get("id_message")
            channel_member = inter.guild.get_channel(channel_member_id)
            message_member = await channel_member.fetch_message(message_member_id)
            await message_member.delete()

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
            del members[str(member_id)]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
            existing_embeds = message.embeds
            color = existing_embeds[1].color
            card_embed_user = e_cards_users(inter.guild, color, owner_name, members)

            await inter.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å –∫–∞—Ä—Ç—ã {full_number}!", ephemeral=True)

            await message.edit(embeds=[existing_embeds[0], existing_embeds[1], card_embed_user], attachments=[])

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id, data in members.items():
                msg_id = data.get("id_message")
                channel_id = data.get("id_channel")
                channel = inter.client.get_channel(channel_id)
                message_users = await channel.fetch_message(msg_id)
                await message_users.edit(embeds=[existing_embeds[0], existing_embeds[1], card_embed_user], attachments=[])


            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            supabase.table("cards").update({"members": members}).eq("select_menu_id", message.id).execute()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º members –∫–∞–∫ jsonb

    modal = RemoveUserModal()
    await inter.response.send_modal(modal)



#@ ---------------------------------------------------------------------------------------------------------------------------------
#@                                                        –ü–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É                                                            
#@ ---------------------------------------------------------------------------------------------------------------------------------

async def sm_transfer_owner(inter, user, message, channel):
    cards_table = supabase.table("cards").select("type, number, members, owner, clients(nickname, channels)").eq("select_menu_id", message.id).execute()

    if not cards_table.data:
        await inter.response.send_message("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.", ephemeral=True)
        return

    type = cards_table.data[0]['type']
    number = cards_table.data[0]['number']
    members = cards_table.data[0]['members']
    full_number = f"{suffixes.get(type, type)}{number}"
    client_data = cards_table.data[0].get("clients")
    old_owner_name = client_data["nickname"]
    old_owner_id = cards_table.data[0]['owner'] 
    old_owner_transaction_channel_id = list(map(int, client_data["channels"].strip("[]").split(",")))[0]
    old_owner_card_channel_id = list(map(int, client_data["channels"].strip("[]").split(",")))[1]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π (–Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ)
    if type == admCardTypes[2]:
        await inter.response.send_message("–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã", ephemeral=True)
        return

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ json
    if not isinstance(members, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å (jsonb)
        members = {}

    class TransferOwner(nxc.ui.Modal):
        def __init__(self):
            super().__init__(title="–ü–µ—Ä–µ–¥–∞—á–∞ –∫–∞—Ä—Ç—ã")
            self.nickname_input = nxc.ui.TextInput(label="–ù–∏–∫–Ω–µ–π–º –∫–ª–∏–µ–Ω—Ç–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º...", required=True, min_length=2, max_length=32)
            self.add_item(self.nickname_input)


        async def callback(self, inter: nxc.Interaction):
            await inter.response.defer(ephemeral=True)
            nickname = self.nickname_input.value.strip()
            
            nick_table = supabase.table("clients").select("dsc_id, channels").eq("nickname", nickname).execute()
            if not nick_table.data:
                await inter.send(f"–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º.", ephemeral=True)
                return

            member_id = nick_table.data[0]['dsc_id']
            if member_id == old_owner_id:
                await inter.send(f"–û—à–∏–±–∫–∞: –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Å–∞–º–æ–º—É —Å–µ–±–µ.", ephemeral=True)
                return

            if str(member_id) not in members:
                await inter.send(f"–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç `{nickname}` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ä—Ç—ã. –ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–∞—Ä—Ç—ã, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.", ephemeral=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç
            command = "–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ä—Ç—ã"
            if not await verify_count_cards(inter, member_id, command):
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—à–ª–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            members[str(old_owner_id)] = {"id_transactions_channel": old_owner_transaction_channel_id, "id_channel": old_owner_card_channel_id, "id_message": message.id}

            new_owner_message_id = members.get(str(member_id)).get("id_message")
            new_owner_channel_id = members.get(str(member_id)).get("id_channel")

            # –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            del members[str(member_id)]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∞)
            existing_embeds = message.embeds
            color = existing_embeds[0].color
            color_name = reverse_embed_colors.get(color, "Unknown")

            await card_generate(full_number, nickname, color_name)
            # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            channel = inter.client.get_channel(image_saver_channel)
            async for msg in channel.history(limit=None):
                if full_number in msg.content:
                    await msg.delete()

            #–≤—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ embed
            await inter.send(f"{nickname} —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞—Ä—Ç—ã `{full_number}`!", ephemeral=True)
            await asyncio.sleep(1,5)
            card_image = f"{full_number}.png"
            card = nxc.File(f"card_gen/cards/{card_image}", filename=card_image)
            image_upload_channel = inter.guild.get_channel(image_saver_channel)
            temp_message = await image_upload_channel.send(content=f"{full_number}",file=card)
            image_url = temp_message.attachments[0].url if temp_message.attachments else None

            card_embed_image = e_cards_image(color, image_url)
            card_embed_user = e_cards_users(inter.guild, color, nickname, members)
            new_owner_channel = inter.client.get_channel(new_owner_channel_id)
            new_owner_message = await new_owner_channel.fetch_message(new_owner_message_id)
            await new_owner_message.edit(embeds=[existing_embeds[0], card_embed_image, card_embed_user], attachments=[])

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id, data in members.items():
                msg_id = data.get("id_message")
                channel_id = data.get("id_channel")
                channel = inter.client.get_channel(channel_id)
                message_users = await channel.fetch_message(msg_id)
                await message_users.edit(embeds=[existing_embeds[0], card_embed_image, card_embed_user], attachments=[])

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            supabase.table("cards").update({"owner": member_id,"members": members, "select_menu_id": new_owner_message_id}).eq("select_menu_id", message.id).execute()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º members –∫–∞–∫ jsonb

    modal = TransferOwner()
    await inter.response.send_modal(modal)






#- =================================================================================================================================
#-                                                       –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä                                                          
#- =================================================================================================================================

async def sm_unknown(inter, user, message, channel):
    await inter.response.send_message(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}, –ö–∞–Ω–∞–ª: {channel.mention}", ephemeral=True)
    return 