import nextcord as nxc
from const import *
from .log_functions import *
from nextcord.ui import View, Select
import json

class CardSelectView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @nxc.ui.select(
        custom_id="card_transaction",
        placeholder="–î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ–π",
        options=[
            nxc.SelectOption(label="–ë–∞–ª–∞–Ω—Å", value="sm_checkBalance"),
            nxc.SelectOption(label="–ü–µ—Ä–µ–≤–æ–¥", value="sm_transfer"),
            nxc.SelectOption(label="–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç", value="sm_invoice"),
        ],
    )

    async def card_transaction_callback(self, select: Select, inter: nxc.Interaction):
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Interaction
        user = inter.user
        message = inter.message  # –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É
        channel = inter.channel  # –ö–∞–Ω–∞–ª, –≥–¥–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        action_sm = {
            "sm_checkBalance": sm_check_balance,
            "sm_transfer": sm_transfer,
            "sm_invoice": sm_invoice,
        }

        handler = action_sm.get(select.values[0], sm_unknown)
        await handler(inter, user, message, channel)

        await inter.message.edit(view=CardSelectView())  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä


    @nxc.ui.select(
        custom_id="card_settings",
        placeholder="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        options=[
            nxc.SelectOption(label="–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", value="sm_changeName"),
            nxc.SelectOption(label="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value="sm_addUser"),
            nxc.SelectOption(label="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value="sm_delUser"),
            nxc.SelectOption(label="–ü–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É", value="sm_transferOwner"),
        ],
    )
    async def card_settings_callback(self, select: Select, inter: nxc.Interaction):
        user = inter.user  # –ö—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
        message = inter.message  # –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É
        channel = inter.channel  # –ö–∞–Ω–∞–ª, –≥–¥–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ


        action_sm = {
            "sm_changeName": sm_change_name,
            "sm_addUser": sm_add_user,
            "sm_delUser": sm_del_user,
            "sm_transferOwner": sm_transfer_owner,
        }

        handler = action_sm.get(select.values[0], sm_unknown)
        await handler(inter, user, message, channel)

        await inter.message.edit(view=CardSelectView())  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä





#- –î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ–π
#@ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
async def sm_check_balance(inter, user, message, channel):
    response = supabase.table("cards").select("balance, type, number").eq("select_menu_id", message.id).execute()

    if response.data:
        balance = response.data[0]['balance']
        type = response.data[0]['type']
        number = response.data[0]['number']

        await inter.response.send_message(f"–ù–∞ –∫–∞—Ä—Ç–µ {suffixes.get(type)}{number} —Ö—Ä–∞–Ω–∏—Ç—Å—è {balance} –∞–ª–º.", ephemeral=True)
    else:
        await inter.response.send_message(f"–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", ephemeral=True)
    return 


#@ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
async def sm_transfer(inter, user, message, channel):
    """–í—ã–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""

    # 1. –ò—â–µ–º dsc_id –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ ID –∫–∞–Ω–∞–ª–∞
    query = supabase.table("clients").select("dsc_id").like("channels", f"%,{channel.id}]%").execute()

    # 3. –ü–æ–ª—É—á–∞–µ–º dsc_id –≤–ª–∞–¥–µ–ª—å—Ü–∞
    owner_dsc_id = query.data[0]["dsc_id"]

    # 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if owner_dsc_id != user.id:
        return await inter.response.send_message("‚ùå –û—à–∏–±–∫–∞: –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞!", ephemeral=True)








    class TransferModal(nxc.ui.Modal):
        def __init__(self):
            super().__init__(title="–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")

            self.card_number = nxc.ui.TextInput(label="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä...", required=True, min_length=5, max_length=5)
            self.add_item(self.card_number)

            self.amount = nxc.ui.TextInput(label="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É...", required=True)
            self.add_item(self.amount)

            self.comment = nxc.ui.TextInput(label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", placeholder="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ...", required=False, style=nxc.TextInputStyle.paragraph, max_length=100 )
            self.add_item(self.comment)



        async def callback(self, inter: nxc.Interaction):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã"""
            receiver_card = self.card_number.value.strip()

            # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
            try:
                amount = int(self.amount.value)
                if amount <= 0:
                    raise ValueError
            except ValueError:
                return await inter.response.send_message("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å **—Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º**!", ephemeral=True)
            
            # üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ message.id
            sender_data = supabase.table("cards").select("number, balance").eq("select_menu_id", message.id).execute()
            sender_card = sender_data.data[0]["number"]
            sender_balance = sender_data.data[0]["balance"]

            receiver_data = supabase.table("cards").select("number, balance, owner").eq("number", receiver_card).execute()

            # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if not receiver_data.data:
                return await inter.response.send_message("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ **–Ω–µ –Ω–∞–π–¥–µ–Ω–∞**!", ephemeral=True)

            receiver_balance = receiver_data.data[0]["balance"]
            receiver_owner = receiver_data.data[0]["owner"]

            # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥
            if sender_balance < amount:
                return await inter.response.send_message("‚ùå –û—à–∏–±–∫–∞: **–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤**!", ephemeral=True)

            # üîπ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            supabase.table("cards").update({"balance": sender_balance - amount}).eq("number", sender_card).execute()
            supabase.table("cards").update({"balance": receiver_balance + amount}).eq("number", receiver_card).execute()

            # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ
            await inter.response.send_message(
                f"‚úÖ **–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!**\nüí≥ –û—Ç `{sender_card}`\nüì§ –ö–æ–º—É `{receiver_card}`\nüí∞ –°—É–º–º–∞ `{amount}‚ÇΩ`\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{self.comment.value or '‚Äî'}`",
                ephemeral=True
            )

            # üîπ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ Discord
            recipient = inter.client.get_user(receiver_owner)
            if recipient:
                await recipient.send(
                    f"üì© –í—ã –ø–æ–ª—É—á–∏–ª–∏ **{amount}‚ÇΩ** –æ—Ç `{sender_card}`.\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{self.comment.value or '‚Äî'}`"
                )

    # üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await inter.response.send_modal(TransferModal())

    # await inter.response.send_message(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}, –ö–∞–Ω–∞–ª: {channel.mention}", ephemeral=True)
    return 


# –ü—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç
async def sm_invoice(inter, user, message, channel):
    await inter.response.send_message(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}, –ö–∞–Ω–∞–ª: {channel.mention}", ephemeral=True)
    return 


#- –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
async def sm_change_name(inter, user, message, channel):
    await inter.response.send_message(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}, –ö–∞–Ω–∞–ª: {channel.mention}", ephemeral=True)
    return 


#@ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def sm_add_user(inter, user, message, channel):
    # –ö–ª–∞—Å—Å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    result = supabase.table("cards").select("select_menu_id").eq("select_menu_id", message.id).execute()

    if not result.data:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        await inter.response.send_message("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.", ephemeral=True)
        return




    class AddUserModal(nxc.ui.Modal):
        def __init__(self, message_id, inter):
            super().__init__(title="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–∞—Ä—Ç–µ")
            
            # –•—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é
            self.message_id = message_id
            self.inter = inter
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞
            self.nickname_input = nxc.ui.TextInput(label="–ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º...", required=True, min_length=2, max_length=32)
            self.add_item(self.nickname_input)

        async def callback(self, inter: nxc.Interaction):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–∑ –ø–æ–ª—è
            nickname = self.nickname_input.value.strip()
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            member = nxc.utils.get(inter.guild.members, nick=nickname)
            if not member:
                await inter.response.send_message(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = member.id

            if user_id == user.id:
                await inter.response.send_message(f"–û—à–∏–±–∫–∞: –¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.", ephemeral=True)
                return


            # –®–∞–≥ 4: –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ message_id –≤ Supabase
            cards_table = supabase.table("cards").select("members").eq("select_menu_id", self.message_id).execute()

            if cards_table.data:
                card = cards_table.data[0]
                members = card["members"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if str(user_id) in members:
                    await inter.response.send_message(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.", ephemeral=True)
                    return

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if isinstance(members, str):
                    members = json.loads(members)

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ members (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞)
                members[str(user_id)] = {"id_message": 111111111111111}

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase
                supabase.table("cards").update({"members": json.dumps(members)}).eq("select_menu_id", self.message_id).execute()

                await inter.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞—Ä—Ç–µ!", ephemeral=True)
            else:
                await inter.response.send_message("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", ephemeral=True)

    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal = AddUserModal(message_id=message.id, inter=inter)
    await inter.response.send_modal(modal)












    # await inter.response.send_message(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}, –ö–∞–Ω–∞–ª: {channel.mention}", ephemeral=True)
    return 


#@ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def sm_del_user(inter, user, message, channel):
    result = supabase.table("cards").select("select_menu_id").eq("select_menu_id", message.id).execute()

    if not result.data:
        await inter.response.send_message("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.", ephemeral=True)
        return

    class DelUserModal(nxc.ui.Modal):
        def __init__(self, message_id, inter):
            super().__init__(title="–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞—Ä—Ç—ã")
            
            # –•—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é
            self.message_id = message_id
            self.inter = inter
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞
            self.nickname_input = nxc.ui.TextInput(label="–ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º...", required=True, min_length=2, max_length=32)
            self.add_item(self.nickname_input)

        async def callback(self, inter: nxc.Interaction):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–∑ –ø–æ–ª—è
            nickname = self.nickname_input.value.strip()

            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            member = nxc.utils.get(inter.guild.members, nick=nickname)
            if not member:
                await inter.response.send_message(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '{nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = member.id

            if user_id == user.id:
                await inter.response.send_message(f"–û—à–∏–±–∫–∞: –¢—ã –Ω–µ –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.", ephemeral=True)
                return

            # –®–∞–≥ 4: –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ message_id –≤ Supabase
            cards_table = supabase.table("cards").select("members").eq("select_menu_id", self.message_id).execute()

            if cards_table.data:
                card = cards_table.data[0]
                members = card["members"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ members - —Å—Ç—Ä–æ–∫–∞, –∏ –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
                if isinstance(members, str):
                    members = json.loads(members)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
                if str(user_id) not in members:
                    await inter.response.send_message(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞—Ä—Ç—ã.", ephemeral=True)
                    return

                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
                del members[str(user_id)]

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase
                supabase.table("cards").update({"members": json.dumps(members)}).eq("select_menu_id", self.message_id).execute()

                await inter.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å –∫–∞—Ä—Ç—ã!", ephemeral=True)
            else:
                await inter.response.send_message("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", ephemeral=True)

    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    modal = DelUserModal(message_id=message.id, inter=inter)
    await inter.response.send_modal(modal)




    #await inter.response.send_message(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}, –ö–∞–Ω–∞–ª: {channel.mention}", ephemeral=True)
    return 


# –ü–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É
async def sm_transfer_owner(inter, user, message, channel):
    await inter.response.send_message(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}, –ö–∞–Ω–∞–ª: {channel.mention}", ephemeral=True)
    return 




#- –ù–µ–∏—Å–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä
async def sm_unknown(inter, user, message, channel):
    await inter.response.send_message(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}, –ö–∞–Ω–∞–ª: {channel.mention}", ephemeral=True)
    return 