import nextcord as nxc
import random
import asyncio
import time
import datetime
from datetime import datetime, timedelta
from const import *
from .log_functions import *
from .api import *
from .select_menu import *
from .embeds import *
from card_gen import *


#! –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–¥
async def create_card(banker, name, nickname, type, owner_id, color, do_random: bool, adm_number, balance):

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ä—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
    response = supabase.table("cards").select("number").execute()
    numbers_list = [item["number"] for item in response.data]
    if do_random == True:
        while True:
            number =  f"{int(''.join(random.choices(n, k=5))):05}"
            if number not in numbers_list:
                break
    else:
        number = adm_number
    
    full_number = f"{suffixes.get(type)}{number}"

    check = supabase.table("cards").insert({
        "number": number,
        "name": name,
        "type": type,
        "owner": owner_id,
        "balance": balance
    }).execute()

    if not check.data:
        return [full_number, False]

    cardCreateLog(banker, full_number, owner_id)
    await card_generate(full_number, nickname, color)
    
    return [full_number, True]



#! –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã - –≤—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –µ–µ –≤ –∫–∞–Ω–∞–ª–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
async def next_create_card(inter, member, full_number, card_type_rus, color, name):
    card_image = f"{full_number}.png"

    await inter.followup.send(content=f"–ö–∞—Ä—Ç–∞ —Ç–∏–ø–∞ {card_type_rus} —Å –Ω–æ–º–µ—Ä–æ–º {full_number} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    await asyncio.sleep(2)

    card = nxc.File(f"card_gen/cards/{card_image}", filename=card_image)

    # –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_upload_channel = inter.guild.get_channel(image_saver_channel)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –∫–∞–Ω–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏
    temp_message = await image_upload_channel.send(content=f"{full_number}",file=card)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_url = temp_message.attachments[0].url if temp_message.attachments else None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not await verify_image_upload(inter, image_url):
        return

    # –°–æ–∑–¥–∞—ë–º —ç–º–±–µ–¥—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    card_embed = emb_cards(color, full_number, card_type_rus, name)
    card_embed_image = emb_cards_image(color, image_url)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É
    card_embed_user = emb_cards_users(inter.guild, color, member.display_name, members={})
    embeds = [card_embed, card_embed_image, card_embed_user]

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    response = supabase.table("clients").select("channels").eq("dsc_id", member.id).execute()
    channels = list(map(int, response.data[0]["channels"].strip("[]").split(",")))
    cards_channel_id = channels[1]
    cards_channel = inter.guild.get_channel(cards_channel_id)

    view = CardSelectView()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–π View
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
    message_card = await cards_channel.send(content=f"{member.mention}", embeds=embeds, view=view)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
    card_numbers = full_number[4:]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    supabase.table("cards").update({"select_menu_id": message_card.id}).eq("number", card_numbers).execute()



#! –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
async def delete_card(channel_card_id, message_card_id, bot):
    channel = bot.get_channel(channel_card_id)
    message = await channel.fetch_message(message_card_id)
    await message.delete()
    return



#! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def deleteCardImages(interval):
    while True:
        try:
            current_time = time.time()
            folder_path = "card_gen/cards"

            for filename in os.listdir(folder_path):
                file_path = os.path.join(folder_path, filename)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª + –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if os.path.isfile(file_path) and filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                    file_age = current_time - os.path.getmtime(file_path)  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

                    if file_age > 30:  # –§–∞–π–ª —Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫—É–Ω–¥
                        os.remove(file_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")

        await asyncio.sleep(interval)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞



#! –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –±–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
def get_card_info_demote(member_id):
    response = supabase.rpc("get_user_cards_demote", {"user_id": member_id}).execute()

    if response.data:
        result = response.data[0]
        return {
            "banker_balance": result["banker_balance"],                     # –ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã (–ø–µ—Ä–≤–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞)
            "banker_select_menu_id": result["banker_select_menu_id"],       # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id —Å–æ–æ–±—â–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
            "banker_number": result["banker_number"],                       # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
            "banker_type": result["banker_type"],                           # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
            "non_banker_number": result["non_banker_number"],               # –∏—â–µ—Ç 1 –∫–∞—Ä—Ç—É –Ω–µ –±–∞–Ω–∫–∏—Ä—Å–∫—É—é –∏ –¥–∞–µ—Ç –µ–µ –Ω–æ–º–µ—Ä
            "non_banker_type": result["non_banker_type"],                   # –∏—â–µ—Ç 1 –∫–∞—Ä—Ç—É –Ω–µ –±–∞–Ω–∫–∏—Ä—Å–∫—É—é –∏ –¥–∞–µ—Ç –µ–µ —Ç–∏–ø
            "channels_user": result["channels_user"]                        # –≤—ã–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ channels –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
    return None



#! –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
async def createAccount(guild, member):

    member_name = member.display_name
    member_id = member.id
        
    #*–†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    response = supabase.table("clients").select("dsc_id").execute()
    clients_dsc_id_list = [item["dsc_id"] for item in response.data]

    if member_id not in clients_dsc_id_list:
        #? –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏-–ë–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞
        #! –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –¥–æ—Å—Ç—É–ø–æ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category = await guild.create_category(member_name, overwrites={
            guild.default_role: nxc.PermissionOverwrite(view_channel=False),  # –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º
            member: nxc.PermissionOverwrite(view_channel=True, read_messages=True, read_message_history=True)  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ owner
        })
        #! –ö–∞–Ω–∞–ª "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        transactions_channel = await guild.create_text_channel("üßÆ„Üç–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", category=category, overwrites={
            guild.default_role: nxc.PermissionOverwrite(view_channel=False),
            member: nxc.PermissionOverwrite(view_channel=True, read_message_history=True, read_messages=True, send_messages=False)  # –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        })
        #! –ö–∞–Ω–∞–ª "–ö–∞—Ä—Ç—ã" - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        cards_channel = await guild.create_text_channel("üí≥„Üç–ö–∞—Ä—Ç—ã", category=category, overwrites={
            guild.default_role: nxc.PermissionOverwrite(view_channel=False),
            member: nxc.PermissionOverwrite(view_channel=True, read_message_history=True, read_messages=True, send_messages=False)  # –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        })

        channels = [transactions_channel.id, cards_channel.id]

        #=–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        prdx_id = get_user_id(member_id)

        supabase.table("clients").insert({
            "nickname": member_name,
            "dsc_id": member_id,
            "prdx_id": prdx_id,
            "account": category.id,
            "channels": channels
        }).execute()

        client_role_add = guild.get_role(client_role_id)
        await member.add_roles(client_role_add)

        #–ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏—è
        member_audit = guild.get_channel(bank_audit_channel)
        embed_aud_create_client = emb_aud_create_client(member_id)
        await member_audit.send(embed=embed_aud_create_client)      

        clientCreateLog(member_name)
    return



#! –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
async def deleteAccount(guild, owner):
    owner_id = owner.id
    full_count = 0
    cards_info = []
    
    response_dsc_id = supabase.table("clients").select("dsc_id, account, channels").eq("dsc_id", owner_id).execute()

    if not response_dsc_id.data:
        return[False, full_count, "-"]

    if response_dsc_id.data:
        clients_category_id = int(response_dsc_id.data[0]["account"])
        clients_channels_ids = list(map(int, response_dsc_id.data[0]["channels"].strip("[]").split(",")))

        category = guild.get_channel(clients_category_id)
        if category:
            await category.delete()

        for channel_id in clients_channels_ids:
            channel = guild.get_channel(channel_id)
            if channel:
                await channel.delete()

        delete_account_request = supabase.rpc("delete_account", {"client_id": owner_id}).execute()
        for del_account in delete_account_request.data:
            type = del_account['type']
            number = del_account['number']
            count = del_account['balance']
            members = del_account["members"]
            del_card_full_number = f"{suffixes.get(type, type)}{number}"

            full_count += count

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –≤ —Å–ø–∏—Å–æ–∫
            cards_info.append(f"{del_card_full_number} - {count} –∞–ª–º.")


            for user_id, data in members.items():
                msg_id = data.get("id_message")
                channel_member_id = data.get("id_channel")
                channel_member = guild.get_channel(channel_member_id)
                message_member = await channel_member.fetch_message(msg_id)
                await message_member.delete()

            await del_img_in_channel(guild, del_card_full_number)

        if guild.get_member(owner.id):
            client_role_remove = guild.get_role(client_role_id)
            await owner.remove_roles(client_role_remove)

        clientDeleteLog(owner.display_name)
        cards_output = "\n".join(cards_info) if cards_info else "-"

        if full_count > 0:
            supabase.rpc("add_balance", {"card_number": "00000", "amount": full_count}).execute()

            ceo_message_text = f"**–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É—Ç–∞**\nüí≥ –û–±—â–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç `{full_count}`\nüì§ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\nüì§ {cards_output}"
            ceo_owner_transaction_channel = guild.get_channel(bank_card_transaction)
            await ceo_owner_transaction_channel.send(ceo_message_text)


        request_cards_member = supabase.rpc("find_user_in_members", {"user_id": owner_id}).execute()

        # –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –≥–¥–µ –∫–ª–∏–µ–Ω—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É–¥–∞–ª—è—è –µ–≥–æ.
        for request_card_member in request_cards_member.data:
            members_users = request_card_member['members']
            client_data = request_card_member.get("clients")
            owner_name = client_data["nickname"]
            channels_list = list(map(int, client_data["channels"].strip("[]").split(",")))
            channel_owner = guild.get_channel(channels_list[1])
            messege_owner_id = request_card_member['select_menu_id']
            if not isinstance(members, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å (jsonb)
                members_users = {}

            if request_card_member:
                members_users.pop(str(owner_id), None)
                message_owner = await channel_owner.fetch_message(messege_owner_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
                existing_embeds = message_owner.embeds
                color = existing_embeds[1].color
                card_embed_user = emb_cards_users(channel_owner.guild, color, owner_name, members_users)
                await message_owner.edit(embeds=[existing_embeds[0], existing_embeds[1], card_embed_user], attachments=[])

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for user_id, data in members_users.items():
                    msg_id = data.get("id_message")
                    channel_id = data.get("id_channel")
                    channel = guild.get_channel(channel_id)
                    message_users = await channel.fetch_message(msg_id)
                    await message_users.edit(embeds=[existing_embeds[0], existing_embeds[1], card_embed_user], attachments=[])

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                supabase.table("cards").update({"members": members_users}).eq("select_menu_id", messege_owner_id).execute()

        #–ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏—è
        member_audit = guild.get_channel(bank_audit_channel)
        embed_aud_create_client = emb_aud_create_client(banker_id, member_id, invoice_count)
        await member_audit.send(embed=embed_aud_create_client)

        return[True, full_count, cards_output]
    


#! –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
async def del_img_in_channel(client, full_number):
    channel = client.get_channel(image_saver_channel)
    async for message in channel.history(limit=None):
        if full_number in message.content:
            await message.delete()
    return



#! –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ.
async def scheduled_task(bot):
    check_status_clients = supabase.table("clients").select("dsc_id, freeze_date").eq("status", "freeze").execute()

    for client in check_status_clients.data:
        freeze_date = client["freeze_date"]
        member_id = client["dsc_id"]

        if freeze_date is None:
            return

        freeze_date = datetime.strptime(freeze_date, "%Y-%m-%d") # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É (–µ—Å–ª–∏ –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 30 –¥–µ–Ω—å
        if datetime.now() - freeze_date >= timedelta(days=days_freeze_delete):
            guild = bot.get_guild(server_id[0])
            member = await bot.fetch_user(member_id)
            check_delete_acc = await deleteAccount(guild, member)

            if check_delete_acc[0] == True:
                print(f"–ö–ª–∏–µ–Ω—Ç {member.name} —É–¥–∞–ª–µ–Ω –∑–∞ –Ω–µ–∑–∞—Ö–æ–¥ 30 –¥–µ–Ω—å –µ–≥–æ discord_id - {client['dsc_id']}, –∫–∞—Ä—Ç–∞ –±–∞–Ω–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ {check_delete_acc[1]}")  

                #–ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏—è
                on_audit = guild.get_channel(bank_audit_channel)
                embed_aud_autoDeleteAccount = emb_aud_autoDeleteAccount(member_id)
                await on_audit.send(embed=embed_aud_autoDeleteAccount)



#! –¢–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ —Å–≤–µ—Ä—Ö—É
async def scheduler(bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    while True:
        now = datetime.now()  # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        if now.hour in TARGET_HOURS and now.minute == 0:
            await scheduled_task(bot)
            await asyncio.sleep(180)
                
        await asyncio.sleep(40)
