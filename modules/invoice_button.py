from nextcord.ui import View, Select
import nextcord as nxc
from const import *
from .verify import *

class MyInvoiceView(View):
    def __init__(self):
        super().__init__(timeout=None)  # –°—Ç–∞–≤–∏–º timeout=None, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏







#@ ---------------------------------------------------------------------------------------------------------------------------------
#@                                                     –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—á—ë—Ç                                                             
#@ ---------------------------------------------------------------------------------------------------------------------------------
    @nxc.ui.button(label="–û–ø–ª–∞—Ç–∏—Ç—å", style=nxc.ButtonStyle.green, custom_id="pay_button")
    async def open_modal(self, button: nxc.ui.Button, inter: nxc.Interaction):
        class MyModal(nxc.ui.Modal):
            def __init__(self):
                super().__init__(title="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å—á—ë—Ç")

                self.card_number = nxc.ui.TextInput(label="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è —Å–ø–∏—Å—ã–≤–∞–Ω–∏—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–∞—Ä—Ç—ã...", required=True, min_length=5, max_length=5)
                self.add_item(self.card_number)

                self.comment = nxc.ui.TextInput(label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", placeholder="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ...", required=False, style=nxc.TextInputStyle.paragraph, max_length=100 )
                self.add_item(self.comment)

            async def callback(self, inter: nxc.Interaction):
                await inter.response.defer(ephemeral=True)
                
                user_card = self.card_number.value.strip()
                message = inter.message
                channel = inter.channel

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Ü–∏—Ñ—Ä–∞–º–∏
                if not await verify_card_int(inter, user_card):
                    return

                invoice_data = supabase.table("invoice").select("own_dsc_id, own_number, memb_dsc_id, banker_message_id, count, type, cards(type, balance, members, clients(channels))").eq("memb_message_id", message.id).execute()


                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ —Å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—á—ë—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π
                if not await verify_invoice_card(inter, invoice_data, message):
                    return

                member_id = invoice_data.data[0]["memb_dsc_id"]
                member = await inter.client.fetch_user(member_id)

                check_card = supabase.rpc("check_user_card", {"user_id": member_id, "number_value": user_card}).execute()

                if not check_card.data:
                    await inter.send(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü / –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã", ephemeral=True)
                    return

                member_card_type = check_card.data[0]["type"]
                member_card_number = check_card.data[0]["number"]
                member_card_balance = check_card.data[0]["balance"]
                member_card_members = check_card.data[0]["members"]
                member_card_owner_transaction_channel_id = check_card.data[0]["owner_transactions"]
                member_full_number = f"{suffixes.get(member_card_type, member_card_type)}{member_card_number}"

                if not isinstance(member_card_members, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å (jsonb)
                    member_card_members = {}

                invoice_card_own_id = invoice_data.data[0]["own_dsc_id"]
                invoice_card_own = await inter.client.fetch_user(invoice_card_own_id)
                invoice_count = invoice_data.data[0]["count"]
                invoice_type = invoice_data.data[0]["type"]
                invoice_cards_data = invoice_data.data[0].get("cards")
                invoice_card_type = invoice_cards_data["type"]
                invoice_card_balance = invoice_cards_data["balance"]
                invoice_card_members = invoice_cards_data["members"]
                invoice_clients_data = invoice_cards_data.get("clients")
                invoice_owner_transaction_channel_id = list(map(int, invoice_clients_data["channels"].strip("[]").split(",")))[0]

                if not isinstance(invoice_card_members, dict):
                    invoice_card_members = {}

                # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥
                if member_card_balance < invoice_count:
                    await inter.send("‚ùå –û—à–∏–±–∫–∞: **–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤**!", ephemeral=True)
                    return

                await inter.send(f"‚úÖ **–°—á—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!**", ephemeral=True)

                if invoice_type == "member":
                    invoice_card_number = invoice_data.data[0]["own_number"]
                    invoice_full_number = f"{suffixes.get(invoice_card_type, invoice_card_type)}{invoice_card_number}"

                    # üîπ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    supabase.table("cards").update({"balance": member_card_balance - invoice_count}).eq("number", member_card_number).execute()
                    supabase.table("cards").update({"balance": invoice_card_balance + invoice_count}).eq("number", invoice_card_number).execute()

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                    member_message_text = f"**–°—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω {member.mention}**\nüí≥ –û—Ç–∫—É–¥–∞ `{member_full_number}`\nüì§ –ö–æ–º—É `{invoice_full_number}`\nüí∞ –°—É–º–º–∞ `{invoice_count} –∞–ª–º.`\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{self.comment.value or '‚Äî'}`\n –ó–∞–ø—Ä–æ—Å–∏–≤—à–∏–π: `{invoice_card_own.mention}`"
                    invoice_message_text = f"**–°—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω  {member.mention}**\nüí≥ –û—Ç `{member_full_number}`\nüì§ –ö—É–¥–∞ `{invoice_full_number}`\nüí∞ –°—É–º–º–∞ `{invoice_count} –∞–ª–º.`\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{self.comment.value or '‚Äî'}`\n –ó–∞–ø—Ä–æ—Å–∏–≤—à–∏–π: `{invoice_card_own.mention}`"
                    member_owner_transaction_channel = inter.client.get_channel(member_card_owner_transaction_channel_id)
                    invoice_owner_transaction_channel = inter.client.get_channel(invoice_owner_transaction_channel_id)
                    await member_owner_transaction_channel.send(member_message_text)
                    await invoice_owner_transaction_channel.send(invoice_message_text)

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    for user_id, data in member_card_members.items():
                        channel_id_transactions_member = data.get("id_transactions_channel")
                        channel_transactions_member = inter.client.get_channel(channel_id_transactions_member)
                        await channel_transactions_member.send(member_message_text)

                    for user_id, data in invoice_card_members.items():
                        channel_id_transactions_invoice = data.get("id_transactions_channel")
                        channel_transactions_invoicer = inter.client.get_channel(channel_id_transactions_invoice)
                        await channel_transactions_invoicer.send(invoice_message_text)

                elif invoice_type == "banker":
                    banker_message_id = invoice_data.data[0]["banker_message_id"]
                    banker_invoice_channel = inter.client.get_channel(banker_invoice_channel_id)
                    banker_invoice_message = await banker_invoice_channel.fetch_message(banker_message_id)

                    # üîπ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    supabase.table("cards").update({"balance": member_card_balance - invoice_count}).eq("number", member_card_number).execute()

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                    member_message_text = f"**–°—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω {member.mention}**\nüí≥ –û—Ç–∫—É–¥–∞ `{member_full_number}`\nüì§ –î–µ–π—Å—Ç–≤–∏–µ: `—Å–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö`\nüí∞ –°—É–º–º–∞ `{invoice_count} –∞–ª–º.`\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{self.comment.value or '‚Äî'}`\n –ë–∞–Ω–∫–∏—Ä: `{invoice_card_own.mention}`"
                    member_owner_transaction_channel = inter.client.get_channel(member_card_owner_transaction_channel_id)
                    await member_owner_transaction_channel.send(member_message_text)

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    for user_id, data in member_card_members.items():
                        channel_id_transactions_member = data.get("id_transactions_channel")
                        channel_transactions_member = inter.client.get_channel(channel_id_transactions_member)
                        await channel_transactions_member.send(member_message_text)

                    await banker_invoice_message.edit(f"**–°—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω {member.mention}**\nüì§ –î–µ–π—Å—Ç–≤–∏–µ: `—Å–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö`\nüí∞ –°—É–º–º–∞ `{invoice_count} –∞–ª–º.`", view=None)

                supabase.table("invoice").delete().eq("memb_message_id", message.id).execute()
                await message.edit("‚úÖ –°—á—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!", view=None)
                

        await inter.response.send_modal(MyModal())



#@ ---------------------------------------------------------------------------------------------------------------------------------
#@                                                         –û—Ç–∫–∞–∑–∞—Ç—å—Å—è                                                               
#@ ---------------------------------------------------------------------------------------------------------------------------------

    @nxc.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", style=nxc.ButtonStyle.red, custom_id="decline_button")
    async def disable_button(self, button: nxc.ui.Button, inter: nxc.Interaction):
        await inter.response.defer(ephemeral=True)
        
        message = inter.message
        channel = inter.channel

        invoice_data = supabase.table("invoice").select("own_dsc_id, own_number, memb_dsc_id, banker_message_id, count, type, cards(type, members, clients(channels))").eq("memb_message_id", message.id).execute()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ —Å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—á—ë—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π
        if not await verify_invoice_card(inter, invoice_data, message):
            return

        member_id = invoice_data.data[0]["memb_dsc_id"]
        member = await inter.client.fetch_user(member_id)

        invoice_card_own_id = invoice_data.data[0]["own_dsc_id"]
        invoice_card_own = await inter.client.fetch_user(invoice_card_own_id)
        invoice_card_number = invoice_data.data[0]["own_number"]
        invoice_count = invoice_data.data[0]["count"]
        invoice_type = invoice_data.data[0]["type"]
        invoice_cards_data = invoice_data.data[0].get("cards")
        invoice_card_type = invoice_cards_data["type"]
        invoice_card_members = invoice_cards_data["members"]
        invoice_clients_data = invoice_cards_data.get("clients")
        invoice_owner_transaction_channel_id = list(map(int, invoice_clients_data["channels"].strip("[]").split(",")))[0]
        invoice_full_number = f"{suffixes.get(invoice_card_type, invoice_card_type)}{invoice_card_number}"

        if not isinstance(invoice_card_members, dict):
            invoice_card_members = {}

        await inter.send(f"‚úÖ **–°—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω!**", ephemeral=True)

        if invoice_type == "member":
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            invoice_message_text = f"**–°—á—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π {member.mention} –Ω–∞ —Å—É–º–º—É `{invoice_count} –∞–ª–º.` –æ—Ç–º–µ–Ω—ë–Ω**"
            invoice_owner_transaction_channel = inter.client.get_channel(invoice_owner_transaction_channel_id)
            await invoice_owner_transaction_channel.send(invoice_message_text)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id, data in invoice_card_members.items():
                channel_id_transactions_invoice = data.get("id_transactions_channel")
                channel_transactions_invoicer = inter.client.get_channel(channel_id_transactions_invoice)
                await channel_transactions_invoicer.send(invoice_message_text)
                
        elif invoice_type == "banker":
            banker_message_id = invoice_data.data[0]["banker_message_id"]
            banker_invoice_channel = inter.client.get_channel(banker_invoice_channel_id)
            banker_invoice_message = await banker_invoice_channel.fetch_message(banker_message_id)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            await banker_invoice_message.edit(f"**–°—á—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π {member.mention} –Ω–∞ —Å—É–º–º—É `{invoice_count} –∞–ª–º.` –æ—Ç–º–µ–Ω—ë–Ω**", view=None)

        supabase.table("invoice").delete().eq("memb_message_id", message.id).execute()
        await message.edit("‚úÖ –°—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω!", view=None)

















class BankerInvoiceView(View):
    def __init__(self):
        super().__init__(timeout=None)  # –°—Ç–∞–≤–∏–º timeout=None, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏

#@ ---------------------------------------------------------------------------------------------------------------------------------
#@                                                           –û—Ç–º–µ–Ω–∏—Ç—å                                                               
#@ ---------------------------------------------------------------------------------------------------------------------------------

    @nxc.ui.button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=nxc.ButtonStyle.red, custom_id="cancel_button")
    async def disable_button(self, button: nxc.ui.Button, inter: nxc.Interaction):
        await inter.response.defer(ephemeral=True)
        
        message = inter.message
        channel = inter.channel
        member = inter.user
        member_id = member.id

        invoice_data = supabase.table("invoice").select("own_dsc_id, memb_message_id, memb_channel_id, count, type").eq("banker_message_id", message.id).execute()

        # –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ
        if not await verify_found_data(inter, invoice_data):
            return

        banker_invoice_start_id = invoice_data.data[0]["own_dsc_id"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É —Å—á—ë—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∏—Ä–∞
        if not await verify_invoice_banker_cancel(inter, member_id, banker_invoice_start_id, member):
            return

        member_message_id = invoice_data.data[0]["memb_message_id"]
        member_channel_id = invoice_data.data[0]["memb_channel_id"]
        member_channel = inter.client.get_channel(member_channel_id)
        member_message = await member_channel.fetch_message(member_message_id)
        invoice_count = invoice_data.data[0]["count"]
        invoice_type = invoice_data.data[0]["type"]

        await inter.send(f"‚ùå **–°—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω!**", ephemeral=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        await member_message.edit(f"**–°—á—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –±–∞–Ω–∫–∏—Ä–æ–º {member.mention} –Ω–∞ —Å—É–º–º—É `{invoice_count} –∞–ª–º.` –æ—Ç–º–µ–Ω—ë–Ω**", view=None)

        supabase.table("invoice").delete().eq("memb_message_id", message.id).execute()
        await message.edit(f"‚ùå –°—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω –±–∞–Ω–∫–∏—Ä–æ–º {member.mention}", view=None)
