import nextcord as nxc
from nextcord.ext import commands
from const import *
from log_functions import *
from .services import *
from .api import *
import json


async def createAccount(guild, owner):

    card_name = owner.display_name
    owner_id = owner.id
        
    #*–†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    response = supabase.table("clients").select("dsc_id").execute()
    clients_dsc_id_list = [item["dsc_id"] for item in response.data]
    if owner_id not in clients_dsc_id_list:
        #? –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏-–ë–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞
        #! –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –¥–æ—Å—Ç—É–ø–æ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category = await guild.create_category(card_name, overwrites={
            guild.default_role: nxc.PermissionOverwrite(view_channel=False),  # –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º
            owner: nxc.PermissionOverwrite(view_channel=True, read_messages=True, read_message_history=True)  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ owner
        })
        #! –ö–∞–Ω–∞–ª "–ö–æ–º–∞–Ω–¥—ã" - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
        commands_channel = await guild.create_text_channel("üìá„Üç–ö–æ–º–∞–Ω–¥—ã", category=category, overwrites={
            guild.default_role: nxc.PermissionOverwrite(view_channel=False),  # –ó–∞–ø—Ä–µ—â—ë–Ω –¥–æ—Å—Ç—É–ø –≤—Å–µ–º
            owner: nxc.PermissionOverwrite(
                view_channel=True, send_messages=True, read_message_history=True, use_slash_commands=True)  # –†–∞–∑—Ä–µ—à–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
        })
        #! –ö–∞–Ω–∞–ª "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        transactions_channel = await guild.create_text_channel("üíä„Üç–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", category=category, overwrites={
            guild.default_role: nxc.PermissionOverwrite(view_channel=False),
            owner: nxc.PermissionOverwrite(view_channel=True, read_message_history=True, read_messages=True, send_messages=False)  # –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        })
        #! –ö–∞–Ω–∞–ª "–ö–∞—Ä—Ç—ã" - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        cards_channel = await guild.create_text_channel("üí≥„Üç–ö–∞—Ä—Ç—ã", category=category, overwrites={
            guild.default_role: nxc.PermissionOverwrite(view_channel=False),
            owner: nxc.PermissionOverwrite(view_channel=True, read_message_history=True, read_messages=True, send_messages=False)  # –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        })

        channels = [commands_channel.id, transactions_channel.id, cards_channel.id]

        #=–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        create_client(card_name, owner_id, category.id, channels)
    return

async def deleteAccount(guild, owner):
    owner_id = owner.id

    response_dsc_id = supabase.table("clients").select("dsc_id").execute()
    clients_dsc_id_list = [item["dsc_id"] for item in response_dsc_id.data]

    if owner_id in clients_dsc_id_list:
        response_account = supabase.table("clients").select("account").eq("dsc_id", owner_id).execute()
        response_channels = supabase.table("clients").select("channels").eq("dsc_id", owner_id).execute()
        clients_category_id = int(response_account.data[0]["account"])
        clients_channels_ids = list(map(int, response_channels.data[0]["channels"].strip("[]").split(",")))

        category = guild.get_channel(clients_category_id)
        if category:
            await category.delete()

        for channel_id in clients_channels_ids:
            channel = guild.get_channel(channel_id)
            if channel:
                await channel.delete()

        supabase.table('clients').delete().eq('dsc_id', owner_id).execute()
        supabase.table('cards').delete().eq('owner', owner_id).execute()

        clientDeleteLog(owner.display_name)
