import os
import psycopg2
import logging
import json
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(message)s')
logger = logging.getLogger()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î PostgreSQL
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5432")
DB_NAME = os.getenv("DB_NAME", "your_database")
DB_USER = os.getenv("DB_USER", "your_user")
DB_PASSWORD = os.getenv("DB_PASSWORD", "your_password")

conn = psycopg2.connect(
    host=DB_HOST,
    port=DB_PORT,
    database=DB_NAME,
    user=DB_USER,
    password=DB_PASSWORD
)
# –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
conn.autocommit = True

cursor = conn.cursor(cursor_factory=RealDictCursor)

class DBQuery:
    def __init__(self, table):
        self.table = table
        self.action = "select"
        self.columns = "*"
        self.conditions = []
        self.joins = []
        self.data = []
        self.error = None
        self.values = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ update –∏ insert

        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
        self.foreign_keys = {
            "invoice": {"own_number": ("cards", "number")},
            "cards": {"owner": ("clients", "dsc_id")},
        }

        self._build_joins()

    def _build_joins(self):
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö JOIN'–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
        if self.table == "invoice":
            self.joins.append("JOIN cards ON invoice.own_number = cards.number")
            self.joins.append("JOIN clients ON cards.owner = clients.dsc_id")
        elif self.table == "cards":
            self.joins.append("JOIN clients ON cards.owner = clients.dsc_id")

    def select(self, *columns):
        expanded_columns = set()

        if len(columns) == 1 and isinstance(columns[0], str):
            columns = [col.strip() for col in columns[0].split(",")]

        for col in columns:
            col = col.strip()

            if col.startswith("clients.") or col.startswith("cards."):
                expanded_columns.add(col)
            else:
                expanded_columns.add(f"{self.table}.{col}")

        self.columns = ", ".join(expanded_columns) if expanded_columns else "*"
        self.action = "select"
        return self

    def update(self, values):
        self.values = self._convert_jsonb(values)
        self.action = "update"
        return self

    def insert(self, values):
        self.values = self._convert_jsonb(values)
        self.action = "insert"
        return self

    def delete(self):
        self.action = "delete"
        return self

    def eq(self, column, value):
        self.conditions.append((column, value))
        return self

    def _convert_jsonb(self, values):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç `dict` –≤ JSON-—Å—Ç—Ä–æ–∫—É –¥–ª—è PostgreSQL JSONB."""
        return {k: json.dumps(v) if isinstance(v, dict) else v for k, v in values.items()}

    def execute(self):
        if self.action == "select":
            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –¥–ª—è SELECT
            where_clause = " AND ".join([f"{col} = %s" for col, _ in self.conditions])
            joins_clause = " ".join(self.joins)
            sql = f"SELECT {self.columns} FROM {self.table} {joins_clause} " + (f"WHERE {where_clause}" if where_clause else "")
            params = tuple(val for _, val in self.conditions)

            cursor.execute(sql, params)
            self.data = [dict(row) for row in cursor.fetchall()]
        
        elif self.action == "update":
            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –¥–ª—è UPDATE
            set_clause = ", ".join([f"{col} = %s" for col in self.values.keys()])
            where_clause = " AND ".join([f"{col} = %s" for col, _ in self.conditions])
            sql = f"UPDATE {self.table} SET {set_clause} WHERE {where_clause}"

            params = list(self.values.values()) + [val for _, val in self.conditions]
            cursor.execute(sql, params)
            conn.commit()
        
        elif self.action == "insert":
            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –¥–ª—è INSERT
            columns = ", ".join(self.values.keys())
            placeholders = ", ".join(["%s"] * len(self.values))
            sql = f"INSERT INTO {self.table} ({columns}) VALUES ({placeholders}) RETURNING *"

            cursor.execute(sql, tuple(self.values.values()))
            conn.commit()
            self.data = [dict(cursor.fetchone())]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ


        elif self.action == "delete":
            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –¥–ª—è DELETE
            where_clause = " AND ".join([f"{col} = %s" for col, _ in self.conditions])
            sql = f"DELETE FROM {self.table} WHERE {where_clause}" if where_clause else f"DELETE FROM {self.table}"

            params = tuple(val for _, val in self.conditions)
            cursor.execute(sql, params)
            conn.commit()

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info(f"üìã DB Request - {sql} | Params: {params if 'params' in locals() else 'N/A'}")

        return self

    def __str__(self):
        return f"{{'data': {self.data}, 'error': {self.error}}}"


class DBRPC:
    def __init__(self, function_name, params):
        self.function_name = function_name
        self.params = params
        self.data = []
        self.error = None

    def execute(self):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ SQL
        if self.params:
            placeholders = ", ".join(["%s"] * len(self.params))
            sql = f"SELECT * FROM {self.function_name}({placeholders})"
        else:
            # –ï—Å–ª–∏ params –ø—É—Å—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            sql = f"SELECT * FROM {self.function_name}()"

        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            cursor.execute(sql, tuple(self.params.values()))

            logger.info(f"üìã DB Request - SQL: {sql} | Params: {self.params}")

            # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if isinstance(cursor, list):
                self.data = [cursor]
            else:
                self.data = cursor.fetchall()
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            self.error = str(e)
            logger.error(f"‚ùå DB Error - SQL: {sql} | Error: {self.error}")

        return self

    def __str__(self):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥
        return f"{{'data': {self.data}, 'error': {self.error}}}"



def db_cursor(table_name):
    return DBQuery(table_name)

def db_rpc(function_name, params):
    return DBRPC(function_name, params)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# result = db_cursor("users").select("*").eq("id", 1).execute()
# print(result.data)

# –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ —Ö—Ä–∞–Ω–∏–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
# rpc_result = db_rpc("get_user_cards_demote", {"user_id": 12345})
# print(rpc_result.data)
