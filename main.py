
#* ==============================
#*         –ò–ú–ü–û–†–¢–´               
#* ==============================
from const import *  
import nextcord
from nextcord.ext import commands
import os
import json
import logging
import asyncio
from modules import *

#* ==============================
#*       –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ï–†–ê       
#* ==============================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | üìã %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

#* ==============================
#*     –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–ö–¢–ê –ë–û–¢–ê     
#* ==============================
intents = nextcord.Intents.default()
intents.message_content = True
intents.messages = True
intents.guilds = True
intents.members = True
bot = commands.Bot(command_prefix=".", intents=intents)

#@ ==================================
#@ –§–£–ù–ö–¶–ò–Ø: bot_ready()              
#@ –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ 
#@ ==================================
def bot_ready(bot):
    header = "üöÄ –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï üöÄ"
    separator = "‚ïê" * 30

    logging.info(f"{header}\n{separator}\n"
                f"ü§ñ –ë–æ—Ç: {bot.user}\n"
                f"üÜî ID: {bot.user.id}\n"
                f"üìÖ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ {len(bot.guilds)} —Å–µ—Ä–≤–µ—Ä–∞–º\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {sum(g.member_count for g in bot.guilds)}\n {separator}\n")

#? =================================
#? –§–£–ù–ö–¶–ò–Ø: cogs_list()             
#? –õ–æ–≥–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö COGs 
#? =================================
def cogs_list(cogs):
    header = "üìÇ –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï COGS üìÇ"
    separator = "‚îÄ" * len(header)

    formatted_list = "\n".join(
        [f"‚úÖ {cog_name.ljust(20)} | {'üü¢ –í–∫–ª—é—á–µ–Ω' if enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}"
        for cog_name, enabled in cogs.items()]
    )

    logging.info(f"\n{header}\n{separator}\n{formatted_list}\n")

#= =================================
#= –§–£–ù–ö–¶–ò–Ø: generate_cogs_config()  
#= –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ COGs 
#= =================================
def generate_cogs_config():
    cogs = [file[:-3] for file in os.listdir(COGS_FOLDER) if file.endswith(".py")]

    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as file:
            config = json.load(file)
    else:
        config = {}

    for cog in cogs:
        if cog not in config:
            config[cog] = True

    with open(CONFIG_FILE, "w") as file:
        json.dump(config, file, indent=4)

    logging.info("üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è COGS –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    return config

#- ==================================
#- –§–£–ù–ö–¶–ò–Ø: load_cogs()              
#- –ó–∞–≥—Ä—É–∂–∞–µ—Ç COGs, –≤—ã–≤–æ–¥–∏—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å 
#- ==================================
def load_cogs(bot):
    config = generate_cogs_config()
    
    all_cogs = {}

    for cog_name, enabled in config.items():
        try:
            if enabled:
                bot.load_extension(f"cogs.{cog_name}")
            all_cogs[cog_name] = enabled  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Å–µ –∫–æ–≥–∏
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {cog_name}: {e}")
            all_cogs[cog_name] = False

    cogs_list(all_cogs)

#@ ==============================
#@ –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–ë–´–¢–ò–Ø on_ready   
#@ ==============================
@bot.event
async def on_ready():
    try:
        await bot.sync_application_commands()
        logging.info("‚úÖ –°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥: {e}")

    bot_ready(bot)
    await start_persistent_view(bot)
    await check_and_refresh_threads(bot)
    await asyncio.gather(deleteCardImages(60), scheduler(bot))

#// ==============================
#// –°–ö–†–´–¢–ò–ï –õ–û–ì–û–í NEXTCORD        
#// ==============================
nextcord_logger = logging.getLogger("nextcord")
nextcord_logger.setLevel(logging.ERROR)

#* –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É COGs 
load_cogs(bot)

#* –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ 
bot.run(BOT_TOKEN)